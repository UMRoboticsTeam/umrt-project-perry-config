/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2025-07-25 05:09:33.981568
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKsin(j[2]);
x3=IKsin(j[1]);
x4=IKcos(j[2]);
x5=IKsin(j[0]);
x6=((1.45e-6)*x2);
x7=((0.3937)*x2);
x8=((1.45e-6)*x4);
x9=((0.3937)*x4);
x10=(x1*x5);
x11=(x0*x1);
x12=(x0*x3);
x13=(x3*x5);
eetrans[0]=((((-0.45720023)*x12))+(((-1.0)*x11*x9))+(((0.00022821)*x5))+((x11*x6))+(((0.03157864)*x11))+((x12*x7))+((x12*x8)));
IkReal x14=((1.0)*x13);
eetrans[1]=((((0.45720023)*x13))+(((0.00022821)*x0))+(((-1.0)*x10*x6))+(((-0.03157864)*x10))+((x10*x9))+(((-1.0)*x14*x7))+(((-1.0)*x14*x8)));
IkReal x15=((1.0)*x1);
eetrans[2]=((0.1687522)+(((-1.0)*x15*x7))+(((-1.0)*x15*x8))+(((-1.0)*x3*x9))+((x3*x6))+(((0.03157864)*x3))+(((0.45720023)*x1)));
}

IKFAST_API int GetNumFreeParameters() { return 1; }
IKFAST_API int* GetFreeParameters() { static int freeparams[] = {3}; return freeparams; }
IKFAST_API int GetNumJoints() { return 4; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x33000003; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1;  _ij3[0] = -1; _ij3[1] = -1; _nj3 = 0; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
j3=pfree[0]; cj3=cos(pfree[0]); sj3=sin(pfree[0]);
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_px=px;
new_py=((-1.0)*py);
new_pz=((0.1687522)+(((-1.0)*pz)));
px = new_px; py = new_py; pz = new_pz;
pp=((px*px)+(py*py)+(pz*pz));
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
if( (((-1.01156095953443)+(((2.77117969121077)*(px*px)))+(((2.77117969121077)*(pz*pz)))+(((2.77117969121077)*(py*py))))) < -1-IKFAST_SINCOS_THRESH || (((-1.01156095953443)+(((2.77117969121077)*(px*px)))+(((2.77117969121077)*(pz*pz)))+(((2.77117969121077)*(py*py))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x16=IKasin(((-1.01156095953443)+(((2.77117969121077)*(px*px)))+(((2.77117969121077)*(pz*pz)))+(((2.77117969121077)*(py*py)))));
j2array[0]=((3.07262888544519)+(((1.0)*x16)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=((6.21422153903499)+(((-1.0)*x16)));
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
if( j2array[1] > IKPI )
{
    j2array[1]-=IK2PI;
}
else if( j2array[1] < -IKPI )
{    j2array[1]+=IK2PI;
}
j2valid[1] = true;
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

{
IkReal j0eval[2];
j0eval[0]=((px*px)+(py*py));
j0eval[1]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
j1eval[0]=((8.44632549668544)+(((-14.4773725422013)*sj2))+(((6.23331162788856)*(cj2*cj2)))+(((6.23331162788856)*(sj2*sj2)))+(((-1.0)*cj2)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((px*px)+(py*py));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[3];
px=0;
py=0;
pp=pz*pz;
j1eval[0]=pz;
j1eval[1]=((8.44632549668544)+(((-14.4773725422013)*sj2))+(((6.23331162788856)*(cj2*cj2)))+(((6.23331162788856)*(sj2*sj2)))+(((-1.0)*cj2)));
j1eval[2]=IKsign(pz);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
px=0;
py=0;
pp=pz*pz;
j1eval[0]=pz;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
px=0;
py=0;
pp=pz*pz;
j1eval[0]=((((-315310.503448276)*pz))+(((271517.24137931)*pz*sj2))+((cj2*pz)));
j1eval[1]=pz;
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(pz);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
px=0;
py=0;
pp=0;
pz=0;
j1eval[0]=((1.0185071070119)+(((-2.01831284026549)*sj2))+(sj2*sj2));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x18 = IKatan2WithCheck(IkReal(((0.457178944523133)+(((-0.393679007809814)*sj2)))),IkReal(((-5.74779532050574)+(((5.69974301986465)*sj2)))),IKFAST_ATAN2_MAGTHRESH);
if(!x18.valid){
continue;
}
IkReal x17=x18.value;
j1array[0]=((-1.0)*x17);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x17)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x19=IKsin(j1);
IkReal x20=IKcos(j1);
evalcond[0]=((((-5.74779532050574)*x20))+(((-0.457178944523133)*x19))+(((5.69974301986465)*sj2*x20))+(((0.393679007809814)*sj2*x19)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x21=((0.3937)*sj2);
IkReal x22=((1.45e-6)*cj2);
CheckValue<IkReal> x23=IKPowWithIntegerCheck((((pz*x22))+((pz*x21))+(((-0.45720023)*pz))),-1);
if(!x23.valid){
continue;
}
CheckValue<IkReal> x24=IKPowWithIntegerCheck(pz,-1);
if(!x24.valid){
continue;
}
if( IKabs(((x23.value)*(((0.0144371906060872)+(((0.154999689997898)*cj2*sj2))+(((-0.0124318476276665)*sj2))+(((-0.179999776340028)*cj2))+(((1.14173e-6)*(cj2*cj2))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x24.value)*(((-0.45720023)+x21+x22)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x23.value)*(((0.0144371906060872)+(((0.154999689997898)*cj2*sj2))+(((-0.0124318476276665)*sj2))+(((-0.179999776340028)*cj2))+(((1.14173e-6)*(cj2*cj2)))))))+IKsqr(((x24.value)*(((-0.45720023)+x21+x22))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x23.value)*(((0.0144371906060872)+(((0.154999689997898)*cj2*sj2))+(((-0.0124318476276665)*sj2))+(((-0.179999776340028)*cj2))+(((1.14173e-6)*(cj2*cj2)))))), ((x24.value)*(((-0.45720023)+x21+x22))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x25=IKcos(j1);
IkReal x26=IKsin(j1);
IkReal x27=((1.45e-6)*sj2);
IkReal x28=((0.3937)*cj2);
IkReal x29=((1.45e-6)*cj2);
IkReal x30=((0.3937)*sj2);
IkReal x31=((0.3937)*x25);
IkReal x32=(pz*x25);
IkReal x33=(pz*x26);
evalcond[0]=((0.45720023)+(((-1.0)*x29))+(((-1.0)*x30))+x32);
evalcond[1]=((-0.03157864)+(((-1.0)*x33))+(((-1.0)*x27))+x28);
evalcond[2]=((-0.0550295187343959)+(((-1.0)*(pz*pz)))+(((-0.91440046)*x32))+(((-0.06315728)*x33)));
evalcond[3]=(((x26*x30))+(((-0.45720023)*x26))+(((-1.0)*x25*x28))+(((0.03157864)*x25))+((x25*x27))+((x26*x29)));
evalcond[4]=((((0.45720023)*x25))+(((-1.0)*x25*x29))+(((0.03157864)*x26))+pz+((x26*x27))+(((-1.0)*x26*x28))+(((-1.0)*x25*x30)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x35=IKPowWithIntegerCheck(pz,-1);
if(!x35.valid){
continue;
}
IkReal x34=x35.value;
CheckValue<IkReal> x36=IKPowWithIntegerCheck(x34,-2);
if(!x36.valid){
continue;
}
if( IKabs(((3.16669748918889e-7)*x34*(((18151729.0944855)+(((-17999973.0551)*sj2))+(((-66.29403335)*cj2))+(((-50000000.0)*(x36.value))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x34*(((-0.45720023)+(((1.45e-6)*cj2))+(((0.3937)*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((3.16669748918889e-7)*x34*(((18151729.0944855)+(((-17999973.0551)*sj2))+(((-66.29403335)*cj2))+(((-50000000.0)*(x36.value)))))))+IKsqr((x34*(((-0.45720023)+(((1.45e-6)*cj2))+(((0.3937)*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((3.16669748918889e-7)*x34*(((18151729.0944855)+(((-17999973.0551)*sj2))+(((-66.29403335)*cj2))+(((-50000000.0)*(x36.value)))))), (x34*(((-0.45720023)+(((1.45e-6)*cj2))+(((0.3937)*sj2))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x37=IKcos(j1);
IkReal x38=IKsin(j1);
IkReal x39=((1.45e-6)*sj2);
IkReal x40=((0.3937)*cj2);
IkReal x41=((1.45e-6)*cj2);
IkReal x42=((0.3937)*sj2);
IkReal x43=((0.3937)*x37);
IkReal x44=(pz*x37);
IkReal x45=(pz*x38);
evalcond[0]=((0.45720023)+(((-1.0)*x42))+(((-1.0)*x41))+x44);
evalcond[1]=((-0.03157864)+(((-1.0)*x45))+(((-1.0)*x39))+x40);
evalcond[2]=((-0.0550295187343959)+(((-1.0)*(pz*pz)))+(((-0.91440046)*x44))+(((-0.06315728)*x45)));
evalcond[3]=((((0.03157864)*x37))+(((-1.0)*x37*x40))+((x37*x39))+(((-0.45720023)*x38))+((x38*x41))+((x38*x42)));
evalcond[4]=((((0.03157864)*x38))+(((-1.0)*x37*x42))+(((-1.0)*x37*x41))+(((0.45720023)*x37))+(((-1.0)*x38*x40))+((x38*x39))+pz);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x46 = IKatan2WithCheck(IkReal(((-0.03157864)+(((0.3937)*cj2))+(((-1.45e-6)*sj2)))),IkReal(((-0.45720023)+(((1.45e-6)*cj2))+(((0.3937)*sj2)))),IKFAST_ATAN2_MAGTHRESH);
if(!x46.valid){
continue;
}
CheckValue<IkReal> x47=IKPowWithIntegerCheck(IKsign(pz),-1);
if(!x47.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x46.value)+(((1.5707963267949)*(x47.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x48=IKcos(j1);
IkReal x49=IKsin(j1);
IkReal x50=((1.45e-6)*sj2);
IkReal x51=((0.3937)*cj2);
IkReal x52=((1.45e-6)*cj2);
IkReal x53=((0.3937)*sj2);
IkReal x54=((0.3937)*x48);
IkReal x55=(pz*x48);
IkReal x56=(pz*x49);
evalcond[0]=((0.45720023)+x55+(((-1.0)*x52))+(((-1.0)*x53)));
evalcond[1]=((-0.03157864)+x51+(((-1.0)*x50))+(((-1.0)*x56)));
evalcond[2]=((-0.0550295187343959)+(((-0.06315728)*x56))+(((-1.0)*(pz*pz)))+(((-0.91440046)*x55)));
evalcond[3]=((((0.03157864)*x48))+(((-1.0)*x48*x51))+(((-0.45720023)*x49))+((x49*x53))+((x49*x52))+((x48*x50)));
evalcond[4]=((((0.03157864)*x49))+(((0.45720023)*x48))+(((-1.0)*x48*x52))+(((-1.0)*x48*x53))+(((-1.0)*x49*x51))+pz+((x49*x50)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[3];
px=0;
py=0;
pp=pz*pz;
j1eval[0]=pz;
j1eval[1]=((8.44632549668544)+(((-14.4773725422013)*sj2))+(((6.23331162788856)*(cj2*cj2)))+(((6.23331162788856)*(sj2*sj2)))+(((-1.0)*cj2)));
j1eval[2]=IKsign(pz);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
px=0;
py=0;
pp=pz*pz;
j1eval[0]=pz;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
px=0;
py=0;
pp=pz*pz;
j1eval[0]=((((-315310.503448276)*pz))+(((271517.24137931)*pz*sj2))+((cj2*pz)));
j1eval[1]=pz;
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x57=pz*pz;
IkReal x58=IKabs(pz);
IkReal x59=x57;
CheckValue<IkReal> x65=IKPowWithIntegerCheck(IKabs(((7874000.0000534)*x58)),-1);
if(!x65.valid){
continue;
}
IkReal x60=x65.value;
IkReal x66 = x59;
if(IKabs(x66)==0){
continue;
}
IkReal x61=pow(x66,-0.5);
CheckValue<IkReal> x67=IKPowWithIntegerCheck(x58,-2);
if(!x67.valid){
continue;
}
if((((1.0)+(((-1.34859657015583)*x57*(x67.value))))) < -0.00001)
continue;
IkReal x62=IKsqrt(((1.0)+(((-1.34859657015583)*x57*(x67.value)))));
IkReal x63=(x57*x60*x61);
IkReal x64=(pz*x61*x62);
if((x59) < -0.00001)
continue;
CheckValue<IkReal> x68=IKPowWithIntegerCheck(IKabs(((7874000.0000534)*(IKsqrt(x59)))),-1);
if(!x68.valid){
continue;
}
if( (((9144004.6)*pz*(x68.value))) < -1-IKFAST_SINCOS_THRESH || (((9144004.6)*pz*(x68.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x69 = IKatan2WithCheck(IkReal(pz),IkReal(((271517.24137931)*pz)),IKFAST_ATAN2_MAGTHRESH);
if(!x69.valid){
continue;
}
IkReal gconst0=((IKasin(((9144004.6)*pz*(x68.value))))+(((-1.0)*(x69.value))));
IkReal gconst1=((((9144004.59993798)*x63))+(((-3.68300736598975e-6)*x64)));
IkReal gconst2=((((33.6774362964442)*x63))+(((0.999999999993218)*x64)));
if((pz*pz) < -0.00001)
continue;
CheckValue<IkReal> x70=IKPowWithIntegerCheck(IKabs(((7874000.0000534)*(IKsqrt(pz*pz)))),-1);
if(!x70.valid){
continue;
}
if( (((9144004.6)*pz*(x70.value))) < -1-IKFAST_SINCOS_THRESH || (((9144004.6)*pz*(x70.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x71 = IKatan2WithCheck(IkReal(pz),IkReal(((271517.24137931)*pz)),IKFAST_ATAN2_MAGTHRESH);
if(!x71.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*(IKasin(((9144004.6)*pz*(x70.value))))))+(x71.value)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[2];
IkReal x72=pz*pz;
IkReal x73=IKabs(pz);
IkReal x74=x72;
IkReal x75=x60;
IkReal x81 = x74;
if(IKabs(x81)==0){
continue;
}
IkReal x76=pow(x81,-0.5);
IkReal x77=x62;
if((x74) < -0.00001)
continue;
CheckValue<IkReal> x82=IKPowWithIntegerCheck(IKabs(((7874000.0000534)*(IKsqrt(x74)))),-1);
if(!x82.valid){
continue;
}
if( (((9144004.6)*pz*(x82.value))) < -1-IKFAST_SINCOS_THRESH || (((9144004.6)*pz*(x82.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x78=IKasin(((9144004.6)*pz*(x82.value)));
IkReal x79=(x72*x75*x76);
IkReal x80=(pz*x76*x77);
px=0;
py=0;
pp=x72;
sj2=gconst1;
cj2=gconst2;
CheckValue<IkReal> x83 = IKatan2WithCheck(IkReal(pz),IkReal(((271739.130434783)*pz)),IKFAST_ATAN2_MAGTHRESH);
if(!x83.valid){
continue;
}
j2=((((-1.0)*(x83.value)))+x78);
CheckValue<IkReal> x84 = IKatan2WithCheck(IkReal(pz),IkReal(((271517.24137931)*pz)),IKFAST_ATAN2_MAGTHRESH);
if(!x84.valid){
continue;
}
IkReal gconst0=(x78+(((-1.0)*(x84.value))));
IkReal gconst1=((((-3.68300736598975e-6)*x80))+(((9144004.59993798)*x79)));
IkReal gconst2=((((0.999999999993218)*x80))+(((33.6774362964442)*x79)));
j1eval[0]=pz;
j1eval[1]=IKsign(pz);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
IkReal x85=pz*pz;
IkReal x86=IKabs(pz);
IkReal x87=x85;
IkReal x88=x60;
IkReal x94 = x87;
if(IKabs(x94)==0){
continue;
}
IkReal x89=pow(x94,-0.5);
IkReal x90=x62;
if((x87) < -0.00001)
continue;
CheckValue<IkReal> x95=IKPowWithIntegerCheck(IKabs(((7874000.0000534)*(IKsqrt(x87)))),-1);
if(!x95.valid){
continue;
}
if( (((9144004.6)*pz*(x95.value))) < -1-IKFAST_SINCOS_THRESH || (((9144004.6)*pz*(x95.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x91=IKasin(((9144004.6)*pz*(x95.value)));
IkReal x92=(x85*x88*x89);
IkReal x93=(pz*x89*x90);
px=0;
py=0;
pp=x85;
sj2=gconst1;
cj2=gconst2;
CheckValue<IkReal> x96 = IKatan2WithCheck(IkReal(pz),IkReal(((271739.130434783)*pz)),IKFAST_ATAN2_MAGTHRESH);
if(!x96.valid){
continue;
}
j2=((((-1.0)*(x96.value)))+x91);
CheckValue<IkReal> x97 = IKatan2WithCheck(IkReal(pz),IkReal(((271517.24137931)*pz)),IKFAST_ATAN2_MAGTHRESH);
if(!x97.valid){
continue;
}
IkReal gconst0=(x91+(((-1.0)*(x97.value))));
IkReal gconst1=((((-3.68300736598975e-6)*x93))+(((9144004.59993798)*x92)));
IkReal gconst2=((((0.999999999993218)*x93))+(((33.6774362964442)*x92)));
j1eval[0]=pz;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
IkReal x98=pz*pz;
IkReal x99=IKabs(pz);
IkReal x100=x98;
IkReal x101=x60;
IkReal x107 = x100;
if(IKabs(x107)==0){
continue;
}
IkReal x102=pow(x107,-0.5);
IkReal x103=x62;
if((x100) < -0.00001)
continue;
CheckValue<IkReal> x108=IKPowWithIntegerCheck(IKabs(((7874000.0000534)*(IKsqrt(x100)))),-1);
if(!x108.valid){
continue;
}
if( (((9144004.6)*pz*(x108.value))) < -1-IKFAST_SINCOS_THRESH || (((9144004.6)*pz*(x108.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x104=IKasin(((9144004.6)*pz*(x108.value)));
IkReal x105=(x101*x102*x98);
IkReal x106=(pz*x102*x103);
px=0;
py=0;
pp=x98;
sj2=gconst1;
cj2=gconst2;
CheckValue<IkReal> x109 = IKatan2WithCheck(IkReal(pz),IkReal(((271739.130434783)*pz)),IKFAST_ATAN2_MAGTHRESH);
if(!x109.valid){
continue;
}
j2=(x104+(((-1.0)*(x109.value))));
CheckValue<IkReal> x110 = IKatan2WithCheck(IkReal(pz),IkReal(((271517.24137931)*pz)),IKFAST_ATAN2_MAGTHRESH);
if(!x110.valid){
continue;
}
IkReal gconst0=(x104+(((-1.0)*(x110.value))));
IkReal gconst1=((((-3.68300736598975e-6)*x106))+(((9144004.59993798)*x105)));
IkReal gconst2=((((0.999999999993218)*x106))+(((33.6774362964442)*x105)));
j1eval[0]=pz;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j0, j1]

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x111=IKPowWithIntegerCheck(((((-0.3937)*gconst2*pz))+(((0.03157864)*pz))+(((1.45e-6)*gconst1*pz))),-1);
if(!x111.valid){
continue;
}
CheckValue<IkReal> x112=IKPowWithIntegerCheck(pz,-1);
if(!x112.valid){
continue;
}
if( IKabs(((x111.value)*(((0.209032050312053)+(((1.14173e-6)*gconst1*gconst2))+(((-1.0)*(pz*pz)))+(((0.15499969)*(gconst1*gconst1)))+(((2.1025e-12)*(gconst2*gconst2)))+(((-0.359999461102)*gconst1))+(((-1.325880667e-6)*gconst2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x112.value)*(((-0.45720023)+(((0.3937)*gconst1))+(((1.45e-6)*gconst2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x111.value)*(((0.209032050312053)+(((1.14173e-6)*gconst1*gconst2))+(((-1.0)*(pz*pz)))+(((0.15499969)*(gconst1*gconst1)))+(((2.1025e-12)*(gconst2*gconst2)))+(((-0.359999461102)*gconst1))+(((-1.325880667e-6)*gconst2))))))+IKsqr(((x112.value)*(((-0.45720023)+(((0.3937)*gconst1))+(((1.45e-6)*gconst2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x111.value)*(((0.209032050312053)+(((1.14173e-6)*gconst1*gconst2))+(((-1.0)*(pz*pz)))+(((0.15499969)*(gconst1*gconst1)))+(((2.1025e-12)*(gconst2*gconst2)))+(((-0.359999461102)*gconst1))+(((-1.325880667e-6)*gconst2))))), ((x112.value)*(((-0.45720023)+(((0.3937)*gconst1))+(((1.45e-6)*gconst2))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x113=IKcos(j1);
IkReal x114=IKsin(j1);
IkReal x115=((1.45e-6)*gconst1);
IkReal x116=((0.3937)*gconst2);
IkReal x117=((1.45e-6)*gconst2);
IkReal x118=(gconst1*x114);
IkReal x119=(pz*x113);
IkReal x120=(pz*x114);
IkReal x121=((0.3937)*x113);
evalcond[0]=((0.45720023)+(((-0.3937)*gconst1))+(((-1.0)*x117))+x119);
evalcond[1]=((-0.03157864)+(((-1.0)*x115))+x116+(((-1.0)*x120)));
evalcond[2]=((-0.0550295187343959)+(((-0.06315728)*x120))+(((-0.91440046)*x119))+(((-1.0)*(pz*pz))));
evalcond[3]=((((-0.45720023)*x114))+((x114*x117))+(((-1.0)*x113*x116))+((x113*x115))+(((0.3937)*x118))+(((0.03157864)*x113)));
evalcond[4]=(((x114*x115))+(((-1.0)*x113*x117))+(((-1.0)*gconst1*x121))+(((-1.0)*x114*x116))+pz+(((0.45720023)*x113))+(((0.03157864)*x114)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x123=IKPowWithIntegerCheck(pz,-1);
if(!x123.valid){
continue;
}
IkReal x122=x123.value;
CheckValue<IkReal> x124=IKPowWithIntegerCheck(x122,-2);
if(!x124.valid){
continue;
}
if( IKabs(((3.16669748918889e-7)*x122*(((18151729.0944855)+(((-66.29403335)*gconst2))+(((-17999973.0551)*gconst1))+(((-50000000.0)*(x124.value))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x122*(((-0.45720023)+(((0.3937)*gconst1))+(((1.45e-6)*gconst2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((3.16669748918889e-7)*x122*(((18151729.0944855)+(((-66.29403335)*gconst2))+(((-17999973.0551)*gconst1))+(((-50000000.0)*(x124.value)))))))+IKsqr((x122*(((-0.45720023)+(((0.3937)*gconst1))+(((1.45e-6)*gconst2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((3.16669748918889e-7)*x122*(((18151729.0944855)+(((-66.29403335)*gconst2))+(((-17999973.0551)*gconst1))+(((-50000000.0)*(x124.value)))))), (x122*(((-0.45720023)+(((0.3937)*gconst1))+(((1.45e-6)*gconst2))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x125=IKcos(j1);
IkReal x126=IKsin(j1);
IkReal x127=((1.45e-6)*gconst1);
IkReal x128=((0.3937)*gconst2);
IkReal x129=((1.45e-6)*gconst2);
IkReal x130=(gconst1*x126);
IkReal x131=(pz*x125);
IkReal x132=(pz*x126);
IkReal x133=((0.3937)*x125);
evalcond[0]=((0.45720023)+(((-0.3937)*gconst1))+(((-1.0)*x129))+x131);
evalcond[1]=((-0.03157864)+(((-1.0)*x127))+x128+(((-1.0)*x132)));
evalcond[2]=((-0.0550295187343959)+(((-0.06315728)*x132))+(((-0.91440046)*x131))+(((-1.0)*(pz*pz))));
evalcond[3]=((((-0.45720023)*x126))+((x125*x127))+(((0.3937)*x130))+(((-1.0)*x125*x128))+((x126*x129))+(((0.03157864)*x125)));
evalcond[4]=((((-1.0)*gconst1*x133))+(((-1.0)*x126*x128))+pz+(((-1.0)*x125*x129))+((x126*x127))+(((0.45720023)*x125))+(((0.03157864)*x126)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x134 = IKatan2WithCheck(IkReal(((-0.03157864)+(((-1.45e-6)*gconst1))+(((0.3937)*gconst2)))),IkReal(((-0.45720023)+(((0.3937)*gconst1))+(((1.45e-6)*gconst2)))),IKFAST_ATAN2_MAGTHRESH);
if(!x134.valid){
continue;
}
CheckValue<IkReal> x135=IKPowWithIntegerCheck(IKsign(pz),-1);
if(!x135.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x134.value)+(((1.5707963267949)*(x135.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x136=IKcos(j1);
IkReal x137=IKsin(j1);
IkReal x138=((1.45e-6)*gconst1);
IkReal x139=((0.3937)*gconst2);
IkReal x140=((1.45e-6)*gconst2);
IkReal x141=(gconst1*x137);
IkReal x142=(pz*x136);
IkReal x143=(pz*x137);
IkReal x144=((0.3937)*x136);
evalcond[0]=((0.45720023)+(((-1.0)*x140))+(((-0.3937)*gconst1))+x142);
evalcond[1]=((-0.03157864)+x139+(((-1.0)*x138))+(((-1.0)*x143)));
evalcond[2]=((-0.0550295187343959)+(((-1.0)*(pz*pz)))+(((-0.91440046)*x142))+(((-0.06315728)*x143)));
evalcond[3]=((((0.3937)*x141))+((x137*x140))+((x136*x138))+(((-1.0)*x136*x139))+(((0.03157864)*x136))+(((-0.45720023)*x137)));
evalcond[4]=((((-1.0)*x137*x139))+((x137*x138))+pz+(((0.45720023)*x136))+(((-1.0)*gconst1*x144))+(((0.03157864)*x137))+(((-1.0)*x136*x140)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x145=pz*pz;
IkReal x146=IKabs(pz);
IkReal x147=x145;
CheckValue<IkReal> x153=IKPowWithIntegerCheck(IKabs(((7874000.0000534)*x146)),-1);
if(!x153.valid){
continue;
}
IkReal x148=x153.value;
IkReal x154 = x147;
if(IKabs(x154)==0){
continue;
}
IkReal x149=pow(x154,-0.5);
CheckValue<IkReal> x155=IKPowWithIntegerCheck(x146,-2);
if(!x155.valid){
continue;
}
if((((1.0)+(((-1.34859657015583)*x145*(x155.value))))) < -0.00001)
continue;
IkReal x150=IKsqrt(((1.0)+(((-1.34859657015583)*x145*(x155.value)))));
IkReal x151=(x145*x148*x149);
IkReal x152=(pz*x149*x150);
CheckValue<IkReal> x156 = IKatan2WithCheck(IkReal(pz),IkReal(((271517.24137931)*pz)),IKFAST_ATAN2_MAGTHRESH);
if(!x156.valid){
continue;
}
if((x147) < -0.00001)
continue;
CheckValue<IkReal> x157=IKPowWithIntegerCheck(IKabs(((7874000.0000534)*(IKsqrt(x147)))),-1);
if(!x157.valid){
continue;
}
if( (((9144004.6)*pz*(x157.value))) < -1-IKFAST_SINCOS_THRESH || (((9144004.6)*pz*(x157.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x156.value)))+(((-1.0)*(IKasin(((9144004.6)*pz*(x157.value)))))));
IkReal gconst4=((((3.68300736598975e-6)*x152))+(((9144004.59993798)*x151)));
IkReal gconst5=((((33.6774362964442)*x151))+(((-0.999999999993218)*x152)));
CheckValue<IkReal> x158 = IKatan2WithCheck(IkReal(pz),IkReal(((271517.24137931)*pz)),IKFAST_ATAN2_MAGTHRESH);
if(!x158.valid){
continue;
}
if((pz*pz) < -0.00001)
continue;
CheckValue<IkReal> x159=IKPowWithIntegerCheck(IKabs(((7874000.0000534)*(IKsqrt(pz*pz)))),-1);
if(!x159.valid){
continue;
}
if( (((9144004.6)*pz*(x159.value))) < -1-IKFAST_SINCOS_THRESH || (((9144004.6)*pz*(x159.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x158.value)+(IKasin(((9144004.6)*pz*(x159.value))))+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[2];
IkReal x160=pz*pz;
IkReal x161=IKabs(pz);
IkReal x162=x160;
IkReal x163=x148;
IkReal x169 = x162;
if(IKabs(x169)==0){
continue;
}
IkReal x164=pow(x169,-0.5);
IkReal x165=x150;
if((x162) < -0.00001)
continue;
CheckValue<IkReal> x170=IKPowWithIntegerCheck(IKabs(((7874000.0000534)*(IKsqrt(x162)))),-1);
if(!x170.valid){
continue;
}
if( (((9144004.6)*pz*(x170.value))) < -1-IKFAST_SINCOS_THRESH || (((9144004.6)*pz*(x170.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x166=((1.0)*(IKasin(((9144004.6)*pz*(x170.value)))));
IkReal x167=(x160*x163*x164);
IkReal x168=(pz*x164*x165);
px=0;
py=0;
pp=x160;
sj2=gconst4;
cj2=gconst5;
CheckValue<IkReal> x171 = IKatan2WithCheck(IkReal(pz),IkReal(((271739.130434783)*pz)),IKFAST_ATAN2_MAGTHRESH);
if(!x171.valid){
continue;
}
j2=((3.14159265)+(((-1.0)*x166))+(((-1.0)*(x171.value))));
CheckValue<IkReal> x172 = IKatan2WithCheck(IkReal(pz),IkReal(((271517.24137931)*pz)),IKFAST_ATAN2_MAGTHRESH);
if(!x172.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(((-1.0)*x166))+(((-1.0)*(x172.value))));
IkReal gconst4=((((3.68300736598975e-6)*x168))+(((9144004.59993798)*x167)));
IkReal gconst5=((((-0.999999999993218)*x168))+(((33.6774362964442)*x167)));
j1eval[0]=pz;
j1eval[1]=IKsign(pz);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
IkReal x173=pz*pz;
IkReal x174=IKabs(pz);
IkReal x175=x173;
IkReal x176=x148;
IkReal x182 = x175;
if(IKabs(x182)==0){
continue;
}
IkReal x177=pow(x182,-0.5);
IkReal x178=x150;
if((x175) < -0.00001)
continue;
CheckValue<IkReal> x183=IKPowWithIntegerCheck(IKabs(((7874000.0000534)*(IKsqrt(x175)))),-1);
if(!x183.valid){
continue;
}
if( (((9144004.6)*pz*(x183.value))) < -1-IKFAST_SINCOS_THRESH || (((9144004.6)*pz*(x183.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x179=((1.0)*(IKasin(((9144004.6)*pz*(x183.value)))));
IkReal x180=(x173*x176*x177);
IkReal x181=(pz*x177*x178);
px=0;
py=0;
pp=x173;
sj2=gconst4;
cj2=gconst5;
CheckValue<IkReal> x184 = IKatan2WithCheck(IkReal(pz),IkReal(((271739.130434783)*pz)),IKFAST_ATAN2_MAGTHRESH);
if(!x184.valid){
continue;
}
j2=((3.14159265)+(((-1.0)*x179))+(((-1.0)*(x184.value))));
CheckValue<IkReal> x185 = IKatan2WithCheck(IkReal(pz),IkReal(((271517.24137931)*pz)),IKFAST_ATAN2_MAGTHRESH);
if(!x185.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(((-1.0)*x179))+(((-1.0)*(x185.value))));
IkReal gconst4=((((3.68300736598975e-6)*x181))+(((9144004.59993798)*x180)));
IkReal gconst5=((((-0.999999999993218)*x181))+(((33.6774362964442)*x180)));
j1eval[0]=pz;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
IkReal x186=pz*pz;
IkReal x187=IKabs(pz);
IkReal x188=x186;
IkReal x189=x148;
IkReal x195 = x188;
if(IKabs(x195)==0){
continue;
}
IkReal x190=pow(x195,-0.5);
IkReal x191=x150;
if((x188) < -0.00001)
continue;
CheckValue<IkReal> x196=IKPowWithIntegerCheck(IKabs(((7874000.0000534)*(IKsqrt(x188)))),-1);
if(!x196.valid){
continue;
}
if( (((9144004.6)*pz*(x196.value))) < -1-IKFAST_SINCOS_THRESH || (((9144004.6)*pz*(x196.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x192=((1.0)*(IKasin(((9144004.6)*pz*(x196.value)))));
IkReal x193=(x186*x189*x190);
IkReal x194=(pz*x190*x191);
px=0;
py=0;
pp=x186;
sj2=gconst4;
cj2=gconst5;
CheckValue<IkReal> x197 = IKatan2WithCheck(IkReal(pz),IkReal(((271739.130434783)*pz)),IKFAST_ATAN2_MAGTHRESH);
if(!x197.valid){
continue;
}
j2=((3.14159265)+(((-1.0)*x192))+(((-1.0)*(x197.value))));
CheckValue<IkReal> x198 = IKatan2WithCheck(IkReal(pz),IkReal(((271517.24137931)*pz)),IKFAST_ATAN2_MAGTHRESH);
if(!x198.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(((-1.0)*x192))+(((-1.0)*(x198.value))));
IkReal gconst4=((((3.68300736598975e-6)*x194))+(((9144004.59993798)*x193)));
IkReal gconst5=((((-0.999999999993218)*x194))+(((33.6774362964442)*x193)));
j1eval[0]=pz;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j0, j1]

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x199=((1.45e-6)*gconst5);
IkReal x200=((0.3937)*gconst4);
CheckValue<IkReal> x201=IKPowWithIntegerCheck((((pz*x200))+(((-0.45720023)*pz))+((pz*x199))),-1);
if(!x201.valid){
continue;
}
CheckValue<IkReal> x202=IKPowWithIntegerCheck(pz,-1);
if(!x202.valid){
continue;
}
if( IKabs(((x201.value)*(((0.0144377614710872)+(((-0.179999776340028)*gconst5))+(((-0.0124318476276665)*gconst4))+(((-5.70865e-7)*(gconst4*gconst4)))+(((0.154999689997898)*gconst4*gconst5))+(((5.70865e-7)*(gconst5*gconst5))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x202.value)*(((-0.45720023)+x199+x200)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x201.value)*(((0.0144377614710872)+(((-0.179999776340028)*gconst5))+(((-0.0124318476276665)*gconst4))+(((-5.70865e-7)*(gconst4*gconst4)))+(((0.154999689997898)*gconst4*gconst5))+(((5.70865e-7)*(gconst5*gconst5)))))))+IKsqr(((x202.value)*(((-0.45720023)+x199+x200))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x201.value)*(((0.0144377614710872)+(((-0.179999776340028)*gconst5))+(((-0.0124318476276665)*gconst4))+(((-5.70865e-7)*(gconst4*gconst4)))+(((0.154999689997898)*gconst4*gconst5))+(((5.70865e-7)*(gconst5*gconst5)))))), ((x202.value)*(((-0.45720023)+x199+x200))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x203=IKcos(j1);
IkReal x204=IKsin(j1);
IkReal x205=((1.45e-6)*gconst5);
IkReal x206=((1.45e-6)*gconst4);
IkReal x207=((0.3937)*gconst5);
IkReal x208=(gconst4*x204);
IkReal x209=(pz*x203);
IkReal x210=((0.3937)*x203);
IkReal x211=(pz*x204);
evalcond[0]=((0.45720023)+(((-0.3937)*gconst4))+(((-1.0)*x205))+x209);
evalcond[1]=((-0.03157864)+(((-1.0)*x206))+x207+(((-1.0)*x211)));
evalcond[2]=((-0.0550295187343959)+(((-0.91440046)*x209))+(((-0.06315728)*x211))+(((-1.0)*(pz*pz))));
evalcond[3]=((((-1.0)*x203*x207))+(((-0.45720023)*x204))+(((0.03157864)*x203))+((x204*x205))+((x203*x206))+(((0.3937)*x208)));
evalcond[4]=((((-1.0)*x204*x207))+(((0.45720023)*x203))+(((-1.0)*x203*x205))+(((-1.0)*gconst4*x210))+(((0.03157864)*x204))+((x204*x206))+pz);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x213=IKPowWithIntegerCheck(pz,-1);
if(!x213.valid){
continue;
}
IkReal x212=x213.value;
CheckValue<IkReal> x214=IKPowWithIntegerCheck(x212,-2);
if(!x214.valid){
continue;
}
if( IKabs(((3.16669748918889e-7)*x212*(((18151729.0944855)+(((-66.29403335)*gconst5))+(((-17999973.0551)*gconst4))+(((-50000000.0)*(x214.value))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x212*(((-0.45720023)+(((0.3937)*gconst4))+(((1.45e-6)*gconst5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((3.16669748918889e-7)*x212*(((18151729.0944855)+(((-66.29403335)*gconst5))+(((-17999973.0551)*gconst4))+(((-50000000.0)*(x214.value)))))))+IKsqr((x212*(((-0.45720023)+(((0.3937)*gconst4))+(((1.45e-6)*gconst5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((3.16669748918889e-7)*x212*(((18151729.0944855)+(((-66.29403335)*gconst5))+(((-17999973.0551)*gconst4))+(((-50000000.0)*(x214.value)))))), (x212*(((-0.45720023)+(((0.3937)*gconst4))+(((1.45e-6)*gconst5))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x215=IKcos(j1);
IkReal x216=IKsin(j1);
IkReal x217=((1.45e-6)*gconst5);
IkReal x218=((1.45e-6)*gconst4);
IkReal x219=((0.3937)*gconst5);
IkReal x220=(gconst4*x216);
IkReal x221=(pz*x215);
IkReal x222=((0.3937)*x215);
IkReal x223=(pz*x216);
evalcond[0]=((0.45720023)+(((-0.3937)*gconst4))+x221+(((-1.0)*x217)));
evalcond[1]=((-0.03157864)+x219+(((-1.0)*x218))+(((-1.0)*x223)));
evalcond[2]=((-0.0550295187343959)+(((-0.91440046)*x221))+(((-0.06315728)*x223))+(((-1.0)*(pz*pz))));
evalcond[3]=(((x216*x217))+((x215*x218))+(((0.3937)*x220))+(((-0.45720023)*x216))+(((0.03157864)*x215))+(((-1.0)*x215*x219)));
evalcond[4]=(((x216*x218))+(((-1.0)*gconst4*x222))+pz+(((0.45720023)*x215))+(((0.03157864)*x216))+(((-1.0)*x216*x219))+(((-1.0)*x215*x217)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x224 = IKatan2WithCheck(IkReal(((-0.03157864)+(((-1.45e-6)*gconst4))+(((0.3937)*gconst5)))),IkReal(((-0.45720023)+(((0.3937)*gconst4))+(((1.45e-6)*gconst5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x224.valid){
continue;
}
CheckValue<IkReal> x225=IKPowWithIntegerCheck(IKsign(pz),-1);
if(!x225.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x224.value)+(((1.5707963267949)*(x225.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x226=IKcos(j1);
IkReal x227=IKsin(j1);
IkReal x228=((1.45e-6)*gconst5);
IkReal x229=((1.45e-6)*gconst4);
IkReal x230=((0.3937)*gconst5);
IkReal x231=(gconst4*x227);
IkReal x232=(pz*x226);
IkReal x233=((0.3937)*x226);
IkReal x234=(pz*x227);
evalcond[0]=((0.45720023)+(((-0.3937)*gconst4))+x232+(((-1.0)*x228)));
evalcond[1]=((-0.03157864)+x230+(((-1.0)*x234))+(((-1.0)*x229)));
evalcond[2]=((-0.0550295187343959)+(((-0.91440046)*x232))+(((-0.06315728)*x234))+(((-1.0)*(pz*pz))));
evalcond[3]=(((x227*x228))+(((-0.45720023)*x227))+(((0.03157864)*x226))+(((-1.0)*x226*x230))+(((0.3937)*x231))+((x226*x229)));
evalcond[4]=(((x227*x229))+(((-1.0)*x227*x230))+(((0.03157864)*x227))+(((-1.0)*gconst4*x233))+pz+(((-1.0)*x226*x228))+(((0.45720023)*x226)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(pz);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
px=0;
py=0;
pp=0;
pz=0;
j1eval[0]=((1.0185071070119)+(((-2.01831284026549)*sj2))+(sj2*sj2));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j0, j1]

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x236 = IKatan2WithCheck(IkReal(((0.457178944523133)+(((-0.393679007809814)*sj2)))),IkReal(((-5.74779532050574)+(((5.69974301986465)*sj2)))),IKFAST_ATAN2_MAGTHRESH);
if(!x236.valid){
continue;
}
IkReal x235=x236.value;
j1array[0]=((-1.0)*x235);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x235)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x237=IKsin(j1);
IkReal x238=IKcos(j1);
evalcond[0]=((((0.393679007809814)*sj2*x237))+(((5.69974301986465)*sj2*x238))+(((-0.457178944523133)*x237))+(((-5.74779532050574)*x238)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x239=((0.3937)*sj2);
IkReal x240=((1.45e-6)*cj2);
CheckValue<IkReal> x241=IKPowWithIntegerCheck((((pz*x239))+(((-0.45720023)*pz))+((pz*x240))),-1);
if(!x241.valid){
continue;
}
CheckValue<IkReal> x242=IKPowWithIntegerCheck(pz,-1);
if(!x242.valid){
continue;
}
if( IKabs(((x241.value)*(((0.0144371906060872)+(((0.154999689997898)*cj2*sj2))+(((-0.0124318476276665)*sj2))+(((-0.179999776340028)*cj2))+(((1.14173e-6)*(cj2*cj2))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x242.value)*(((-0.45720023)+x239+x240)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x241.value)*(((0.0144371906060872)+(((0.154999689997898)*cj2*sj2))+(((-0.0124318476276665)*sj2))+(((-0.179999776340028)*cj2))+(((1.14173e-6)*(cj2*cj2)))))))+IKsqr(((x242.value)*(((-0.45720023)+x239+x240))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x241.value)*(((0.0144371906060872)+(((0.154999689997898)*cj2*sj2))+(((-0.0124318476276665)*sj2))+(((-0.179999776340028)*cj2))+(((1.14173e-6)*(cj2*cj2)))))), ((x242.value)*(((-0.45720023)+x239+x240))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x243=IKcos(j1);
IkReal x244=IKsin(j1);
IkReal x245=((1.45e-6)*sj2);
IkReal x246=((0.3937)*cj2);
IkReal x247=((1.45e-6)*cj2);
IkReal x248=((0.3937)*sj2);
IkReal x249=((0.3937)*x243);
IkReal x250=(pz*x243);
IkReal x251=(pz*x244);
evalcond[0]=((0.45720023)+x250+(((-1.0)*x247))+(((-1.0)*x248)));
evalcond[1]=((-0.03157864)+x246+(((-1.0)*x245))+(((-1.0)*x251)));
evalcond[2]=((-0.0550295187343959)+(((-0.91440046)*x250))+(((-0.06315728)*x251))+(((-1.0)*(pz*pz))));
evalcond[3]=((((-0.45720023)*x244))+(((-1.0)*x243*x246))+((x244*x247))+((x244*x248))+(((0.03157864)*x243))+((x243*x245)));
evalcond[4]=((((-1.0)*x243*x248))+(((-1.0)*x243*x247))+((x244*x245))+(((0.45720023)*x243))+pz+(((0.03157864)*x244))+(((-1.0)*x244*x246)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x253=IKPowWithIntegerCheck(pz,-1);
if(!x253.valid){
continue;
}
IkReal x252=x253.value;
CheckValue<IkReal> x254=IKPowWithIntegerCheck(x252,-2);
if(!x254.valid){
continue;
}
if( IKabs(((3.16669748918889e-7)*x252*(((18151729.0944855)+(((-50000000.0)*(x254.value)))+(((-17999973.0551)*sj2))+(((-66.29403335)*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x252*(((-0.45720023)+(((1.45e-6)*cj2))+(((0.3937)*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((3.16669748918889e-7)*x252*(((18151729.0944855)+(((-50000000.0)*(x254.value)))+(((-17999973.0551)*sj2))+(((-66.29403335)*cj2))))))+IKsqr((x252*(((-0.45720023)+(((1.45e-6)*cj2))+(((0.3937)*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((3.16669748918889e-7)*x252*(((18151729.0944855)+(((-50000000.0)*(x254.value)))+(((-17999973.0551)*sj2))+(((-66.29403335)*cj2))))), (x252*(((-0.45720023)+(((1.45e-6)*cj2))+(((0.3937)*sj2))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x255=IKcos(j1);
IkReal x256=IKsin(j1);
IkReal x257=((1.45e-6)*sj2);
IkReal x258=((0.3937)*cj2);
IkReal x259=((1.45e-6)*cj2);
IkReal x260=((0.3937)*sj2);
IkReal x261=((0.3937)*x255);
IkReal x262=(pz*x255);
IkReal x263=(pz*x256);
evalcond[0]=((0.45720023)+x262+(((-1.0)*x260))+(((-1.0)*x259)));
evalcond[1]=((-0.03157864)+(((-1.0)*x263))+x258+(((-1.0)*x257)));
evalcond[2]=((-0.0550295187343959)+(((-0.06315728)*x263))+(((-1.0)*(pz*pz)))+(((-0.91440046)*x262)));
evalcond[3]=((((0.03157864)*x255))+(((-1.0)*x255*x258))+((x256*x259))+((x256*x260))+((x255*x257))+(((-0.45720023)*x256)));
evalcond[4]=((((-1.0)*x255*x260))+(((0.03157864)*x256))+(((-1.0)*x255*x259))+(((-1.0)*x256*x258))+((x256*x257))+pz+(((0.45720023)*x255)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x264 = IKatan2WithCheck(IkReal(((-0.03157864)+(((0.3937)*cj2))+(((-1.45e-6)*sj2)))),IkReal(((-0.45720023)+(((1.45e-6)*cj2))+(((0.3937)*sj2)))),IKFAST_ATAN2_MAGTHRESH);
if(!x264.valid){
continue;
}
CheckValue<IkReal> x265=IKPowWithIntegerCheck(IKsign(pz),-1);
if(!x265.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x264.value)+(((1.5707963267949)*(x265.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x266=IKcos(j1);
IkReal x267=IKsin(j1);
IkReal x268=((1.45e-6)*sj2);
IkReal x269=((0.3937)*cj2);
IkReal x270=((1.45e-6)*cj2);
IkReal x271=((0.3937)*sj2);
IkReal x272=((0.3937)*x266);
IkReal x273=(pz*x266);
IkReal x274=(pz*x267);
evalcond[0]=((0.45720023)+x273+(((-1.0)*x271))+(((-1.0)*x270)));
evalcond[1]=((-0.03157864)+(((-1.0)*x274))+x269+(((-1.0)*x268)));
evalcond[2]=((-0.0550295187343959)+(((-0.06315728)*x274))+(((-1.0)*(pz*pz)))+(((-0.91440046)*x273)));
evalcond[3]=(((x266*x268))+(((-0.45720023)*x267))+(((0.03157864)*x266))+(((-1.0)*x266*x269))+((x267*x270))+((x267*x271)));
evalcond[4]=(((x267*x268))+(((0.45720023)*x266))+pz+(((0.03157864)*x267))+(((-1.0)*x267*x269))+(((-1.0)*x266*x270))+(((-1.0)*x266*x271)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x275=((0.45720023)+(((-1.45e-6)*cj2))+(((-0.3937)*sj2)));
IkReal x276=((0.03157864)+(((-0.3937)*cj2))+(((1.45e-6)*sj2)));
CheckValue<IkReal> x279 = IKatan2WithCheck(IkReal(x275),IkReal(x276),IKFAST_ATAN2_MAGTHRESH);
if(!x279.valid){
continue;
}
IkReal x277=((1.0)*(x279.value));
if((((x275*x275)+(x276*x276))) < -0.00001)
continue;
CheckValue<IkReal> x280=IKPowWithIntegerCheck(IKabs(IKsqrt(((x275*x275)+(x276*x276)))),-1);
if(!x280.valid){
continue;
}
if( ((pz*(x280.value))) < -1-IKFAST_SINCOS_THRESH || ((pz*(x280.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x278=IKasin((pz*(x280.value)));
j1array[0]=((((-1.0)*x278))+(((-1.0)*x277)));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+x278+(((-1.0)*x277)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

{
IkReal j0eval[3];
IkReal x281=px*px;
IkReal x282=py*py;
IkReal x283=((39370000.0)*sj2);
IkReal x284=((22821.0)*sj1);
IkReal x285=((145.0)*cj2);
IkReal x286=(sj1*x281);
IkReal x287=((100000000.0)*cj1*pz);
IkReal x288=(sj1*x282);
j0eval[0]=(x288+x286);
j0eval[1]=IKsign(((((100000000.0)*x288))+(((100000000.0)*x286))));
j0eval[2]=((IKabs(((((-1.0)*px*x287))+(((-1.0)*py*x284))+((px*x283))+((px*x285))+(((-45720023.0)*px)))))+(IKabs(((((-1.0)*py*x287))+((py*x285))+((py*x283))+((px*x284))+(((-45720023.0)*py))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
IkReal x289=py*py;
IkReal x290=px*px;
IkReal x291=((39370000.0)*cj2);
IkReal x292=((145.0)*sj2);
IkReal x293=((22821.0)*cj1);
IkReal x294=(cj1*x289);
IkReal x295=(cj1*x290);
IkReal x296=((100000000.0)*pz*sj1);
j0eval[0]=(x294+x295);
j0eval[1]=((IKabs(((((3157864.0)*px))+(((-1.0)*py*x293))+((px*x292))+((px*x296))+(((-1.0)*px*x291)))))+(IKabs(((((3157864.0)*py))+(((-1.0)*py*x291))+((py*x292))+((py*x296))+((px*x293))))));
j0eval[2]=IKsign(((((100000000.0)*x294))+(((100000000.0)*x295))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x297=px*px;
IkReal x298=py*py;
j0eval[0]=(x298+x297);
j0eval[1]=IKsign(((((100000000.0)*x297))+(((100000000.0)*x298))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((px*px)+(py*py));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj1=1.0;
cj1=0;
j1=1.5707963267949;
IkReal x299=px*px;
IkReal x300=py*py;
IkReal x301=((39370000.000534)*sj2);
IkReal x302=((368.300736601473)*pz);
j0eval[0]=(x300+x299);
j0eval[1]=((IKabs((((px*x302))+((px*x301))+(((-45720011.3695636)*px))+(((-22821.0)*py)))))+(IKabs(((((-45720011.3695636)*py))+(((22821.0)*px))+((py*x301))+((py*x302))))));
j0eval[2]=IKsign(((((100000000.0)*x300))+(((100000000.0)*x299))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj1=1.0;
cj1=0;
j1=1.5707963267949;
IkReal x303=px*px;
IkReal x304=py*py;
IkReal x305=pz*pz;
IkReal x306=((5.0e+15)*py);
IkReal x307=((315786400000000.0)*pz);
IkReal x308=((5.0e+15)*px);
j0eval[0]=(x304+x303);
j0eval[1]=IKsign(((((4.5720023e+15)*x303))+(((4.5720023e+15)*x304))));
j0eval[2]=((IKabs(((((-275147593671980.0)*py))+(((-1.0)*x303*x306))+(((-1.0)*x306*(py*py)))+(((-1.0)*py*x307))+(((-1.0)*x305*x306))+(((1043376644883.0)*px)))))+(IKabs(((((-1.0)*px*x307))+(((-275147593671980.0)*px))+(((-1043376644883.0)*py))+(((-1.0)*x308*(px*px)))+(((-1.0)*x305*x308))+(((-1.0)*x304*x308))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((px*px)+(py*py));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x309=px*px;
IkReal x310=py*py;
IkReal x311=pz*pz;
IkReal x312=((315786400000000.0)*pz);
IkReal x313=((5.0e+15)*x311);
CheckValue<IkReal> x314=IKPowWithIntegerCheck(IKsign(((((4.5720023e+15)*x309))+(((4.5720023e+15)*x310)))),-1);
if(!x314.valid){
continue;
}
CheckValue<IkReal> x315 = IKatan2WithCheck(IkReal(((((-275147593671980.0)*py))+(((-1.0)*py*x312))+(((-1.0)*py*x313))+(((-5.0e+15)*py*x309))+(((-5.0e+15)*(py*py*py)))+(((1043376644883.0)*px)))),IkReal(((((-5.0e+15)*(px*px*px)))+(((-275147593671980.0)*px))+(((-1043376644883.0)*py))+(((-5.0e+15)*px*x310))+(((-1.0)*px*x313))+(((-1.0)*px*x312)))),IKFAST_ATAN2_MAGTHRESH);
if(!x315.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x314.value)))+(x315.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x316=IKsin(j0);
IkReal x317=IKcos(j0);
IkReal x318=(px*x317);
IkReal x319=(py*x316);
evalcond[0]=((-0.00022821)+(((-1.0)*py*x317))+((px*x316)));
evalcond[1]=((0.457200113695636)+(((-3.68300736601473e-6)*pz))+(((-0.39370000000534)*sj2))+x319+x318);
evalcond[2]=((-0.0550295187343959)+(((-0.91440046)*x319))+(((-0.91440046)*x318))+(((-1.0)*(px*px)))+(((-0.06315728)*pz))+(((-1.0)*(pz*pz)))+(((-1.0)*(py*py))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x320=((39370000.000534)*sj2);
IkReal x321=((368.300736601473)*pz);
CheckValue<IkReal> x322=IKPowWithIntegerCheck(IKsign(((((100000000.0)*(px*px)))+(((100000000.0)*(py*py))))),-1);
if(!x322.valid){
continue;
}
CheckValue<IkReal> x323 = IKatan2WithCheck(IkReal(((((-45720011.3695636)*py))+((py*x320))+((py*x321))+(((22821.0)*px)))),IkReal(((((-45720011.3695636)*px))+((px*x320))+((px*x321))+(((-22821.0)*py)))),IKFAST_ATAN2_MAGTHRESH);
if(!x323.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x322.value)))+(x323.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x324=IKsin(j0);
IkReal x325=IKcos(j0);
IkReal x326=(px*x325);
IkReal x327=(py*x324);
evalcond[0]=((-0.00022821)+(((-1.0)*py*x325))+((px*x324)));
evalcond[1]=((0.457200113695636)+(((-3.68300736601473e-6)*pz))+(((-0.39370000000534)*sj2))+x326+x327);
evalcond[2]=((-0.0550295187343959)+(((-1.0)*(px*px)))+(((-0.91440046)*x327))+(((-0.91440046)*x326))+(((-0.06315728)*pz))+(((-1.0)*(pz*pz)))+(((-1.0)*(py*py))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x328=px*px;
IkReal x329=py*py;
IkReal x330=((39370000.000534)*sj2);
IkReal x331=((368.300736601473)*pz);
j0eval[0]=(x328+x329);
j0eval[1]=((IKabs(((((-1.0)*py*x330))+(((45720011.3695636)*py))+((py*x331))+(((22821.0)*px)))))+(IKabs(((((-1.0)*px*x330))+((px*x331))+(((45720011.3695636)*px))+(((-22821.0)*py))))));
j0eval[2]=IKsign(((((100000000.0)*x329))+(((100000000.0)*x328))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x332=py*py;
IkReal x333=pz*pz;
IkReal x334=px*px;
IkReal x335=((5.0e+15)*py);
IkReal x336=((315786400000000.0)*pz);
IkReal x337=((5.0e+15)*px);
j0eval[0]=(x332+x334);
j0eval[1]=((IKabs(((((-1.0)*px*x336))+((x332*x337))+(((-1043376644883.0)*py))+((x337*(px*px)))+((x333*x337))+(((275147593671980.0)*px)))))+(IKabs((((x334*x335))+(((-1.0)*py*x336))+((x333*x335))+(((275147593671980.0)*py))+((x335*(py*py)))+(((1043376644883.0)*px))))));
j0eval[2]=IKsign(((((4.5720023e+15)*x332))+(((4.5720023e+15)*x334))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((px*px)+(py*py));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x338=pz*pz;
IkReal x339=px*px;
IkReal x340=py*py;
IkReal x341=((5.0e+15)*py);
IkReal x342=((315786400000000.0)*pz);
IkReal x343=((5.0e+15)*px);
CheckValue<IkReal> x344=IKPowWithIntegerCheck(IKsign(((((4.5720023e+15)*x339))+(((4.5720023e+15)*x340)))),-1);
if(!x344.valid){
continue;
}
CheckValue<IkReal> x345 = IKatan2WithCheck(IkReal((((x341*(py*py)))+(((275147593671980.0)*py))+((x338*x341))+((x339*x341))+(((-1.0)*py*x342))+(((1043376644883.0)*px)))),IkReal(((((-1.0)*px*x342))+(((-1043376644883.0)*py))+((x343*(px*px)))+(((275147593671980.0)*px))+((x338*x343))+((x340*x343)))),IKFAST_ATAN2_MAGTHRESH);
if(!x345.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x344.value)))+(x345.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x346=IKcos(j0);
IkReal x347=IKsin(j0);
IkReal x348=((1.0)*x346);
IkReal x349=(py*x347);
evalcond[0]=((-0.00022821)+(((-1.0)*py*x348))+((px*x347)));
evalcond[1]=((0.457200113695636)+(((-1.0)*px*x348))+(((-0.39370000000534)*sj2))+(((3.68300736601473e-6)*pz))+(((-1.0)*x349)));
evalcond[2]=((-0.0550295187343959)+(((0.06315728)*pz))+(((-1.0)*(px*px)))+(((0.91440046)*px*x346))+(((0.91440046)*x349))+(((-1.0)*(pz*pz)))+(((-1.0)*(py*py))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x350=((39370000.000534)*sj2);
IkReal x351=((368.300736601473)*pz);
CheckValue<IkReal> x352=IKPowWithIntegerCheck(IKsign(((((100000000.0)*(px*px)))+(((100000000.0)*(py*py))))),-1);
if(!x352.valid){
continue;
}
CheckValue<IkReal> x353 = IKatan2WithCheck(IkReal((((py*x351))+(((45720011.3695636)*py))+(((22821.0)*px))+(((-1.0)*py*x350)))),IkReal((((px*x351))+(((-1.0)*px*x350))+(((45720011.3695636)*px))+(((-22821.0)*py)))),IKFAST_ATAN2_MAGTHRESH);
if(!x353.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x352.value)))+(x353.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x354=IKcos(j0);
IkReal x355=IKsin(j0);
IkReal x356=((1.0)*x354);
IkReal x357=(py*x355);
evalcond[0]=((-0.00022821)+((px*x355))+(((-1.0)*py*x356)));
evalcond[1]=((0.457200113695636)+(((-0.39370000000534)*sj2))+(((-1.0)*px*x356))+(((-1.0)*x357))+(((3.68300736601473e-6)*pz)));
evalcond[2]=((-0.0550295187343959)+(((0.06315728)*pz))+(((-1.0)*(px*px)))+(((0.91440046)*x357))+(((0.91440046)*px*x354))+(((-1.0)*(pz*pz)))+(((-1.0)*(py*py))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j1))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj1=0;
cj1=1.0;
j1=0;
IkReal x358=px*px;
IkReal x359=py*py;
IkReal x360=((27151724137931.0)*pz);
IkReal x361=((10689633793248.4)*sj2);
j0eval[0]=(x359+x358);
j0eval[1]=((IKabs((((px*x361))+(((-1.0)*px*x360))+(((-22821.0)*py))+(((-12413771362894.6)*px)))))+(IKabs((((py*x361))+(((-1.0)*py*x360))+(((22821.0)*px))+(((-12413771362894.6)*py))))));
j0eval[2]=IKsign(((((100000000.0)*x359))+(((100000000.0)*x358))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj1=0;
cj1=1.0;
j1=0;
IkReal x362=px*px;
IkReal x363=py*py;
IkReal x364=pz*pz;
IkReal x365=((625000000000000.0)*py);
IkReal x366=((625000000000000.0)*px);
IkReal x367=((571500287500000.0)*pz);
j0eval[0]=(x362+x363);
j0eval[1]=((IKabs((((x364*x365))+(((34393449208997.4)*py))+((py*x367))+(((9008201793.0)*px))+((x362*x365))+((x365*(py*py))))))+(IKabs((((x364*x366))+(((34393449208997.4)*px))+((x366*(px*px)))+((px*x367))+(((-9008201793.0)*py))+((x363*x366))))));
j0eval[2]=IKsign(((((39473300000000.0)*x362))+(((39473300000000.0)*x363))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((px*px)+(py*py));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x368=px*px;
IkReal x369=py*py;
IkReal x370=pz*pz;
IkReal x371=((625000000000000.0)*py);
IkReal x372=((625000000000000.0)*px);
IkReal x373=((571500287500000.0)*pz);
CheckValue<IkReal> x374 = IKatan2WithCheck(IkReal((((x370*x371))+(((34393449208997.4)*py))+((py*x373))+(((9008201793.0)*px))+((x368*x371))+((x371*(py*py))))),IkReal((((x370*x372))+((x369*x372))+(((34393449208997.4)*px))+((px*x373))+(((-9008201793.0)*py))+((x372*(px*px))))),IKFAST_ATAN2_MAGTHRESH);
if(!x374.valid){
continue;
}
CheckValue<IkReal> x375=IKPowWithIntegerCheck(IKsign(((((39473300000000.0)*x368))+(((39473300000000.0)*x369)))),-1);
if(!x375.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x374.value)+(((1.5707963267949)*(x375.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x376=IKsin(j0);
IkReal x377=IKcos(j0);
IkReal x378=(px*x377);
IkReal x379=(py*x376);
evalcond[0]=((-0.00022821)+(((-1.0)*py*x377))+((px*x376)));
evalcond[1]=((124137.713628946)+x379+x378+(((-106896.337932484)*sj2))+(((271517.24137931)*pz)));
evalcond[2]=((-0.0550295187343959)+(((-1.0)*(px*px)))+(((0.06315728)*x379))+(((0.06315728)*x378))+(((-1.0)*(pz*pz)))+(((-1.0)*(py*py)))+(((-0.91440046)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x380=((27151724137931.0)*pz);
IkReal x381=((10689633793248.4)*sj2);
CheckValue<IkReal> x382=IKPowWithIntegerCheck(IKsign(((((100000000.0)*(px*px)))+(((100000000.0)*(py*py))))),-1);
if(!x382.valid){
continue;
}
CheckValue<IkReal> x383 = IKatan2WithCheck(IkReal(((((-1.0)*py*x380))+(((22821.0)*px))+((py*x381))+(((-12413771362894.6)*py)))),IkReal((((px*x381))+(((-1.0)*px*x380))+(((-22821.0)*py))+(((-12413771362894.6)*px)))),IKFAST_ATAN2_MAGTHRESH);
if(!x383.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x382.value)))+(x383.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x384=IKsin(j0);
IkReal x385=IKcos(j0);
IkReal x386=(px*x385);
IkReal x387=(py*x384);
evalcond[0]=((-0.00022821)+((px*x384))+(((-1.0)*py*x385)));
evalcond[1]=((124137.713628946)+x386+x387+(((-106896.337932484)*sj2))+(((271517.24137931)*pz)));
evalcond[2]=((-0.0550295187343959)+(((0.06315728)*x386))+(((0.06315728)*x387))+(((-1.0)*(px*px)))+(((-1.0)*(pz*pz)))+(((-1.0)*(py*py)))+(((-0.91440046)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
IkReal x388=px*px;
IkReal x389=py*py;
IkReal x390=((27151724137931.0)*pz);
IkReal x391=((10689633793248.4)*sj2);
j0eval[0]=(x388+x389);
j0eval[1]=((IKabs(((((-1.0)*py*x391))+(((-1.0)*py*x390))+(((22821.0)*px))+(((12413771362894.6)*py)))))+(IKabs(((((-1.0)*px*x390))+(((-1.0)*px*x391))+(((12413771362894.6)*px))+(((-22821.0)*py))))));
j0eval[2]=IKsign(((((100000000.0)*x388))+(((100000000.0)*x389))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
IkReal x392=py*py;
IkReal x393=px*px;
IkReal x394=pz*pz;
IkReal x395=((625000000000000.0)*py);
IkReal x396=((625000000000000.0)*px);
IkReal x397=((571500287500000.0)*pz);
j0eval[0]=(x393+x392);
j0eval[1]=((IKabs(((((-1.0)*x394*x395))+((py*x397))+(((-1.0)*x395*(py*py)))+(((9008201793.0)*px))+(((-34393449208997.4)*py))+(((-1.0)*x393*x395)))))+(IKabs(((((-1.0)*x394*x396))+(((-9008201793.0)*py))+((px*x397))+(((-34393449208997.4)*px))+(((-1.0)*x396*(px*px)))+(((-1.0)*x392*x396))))));
j0eval[2]=IKsign(((((39473300000000.0)*x392))+(((39473300000000.0)*x393))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((px*px)+(py*py));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x398=px*px;
IkReal x399=py*py;
IkReal x400=pz*pz;
IkReal x401=((625000000000000.0)*py);
IkReal x402=((625000000000000.0)*px);
IkReal x403=((571500287500000.0)*pz);
CheckValue<IkReal> x404 = IKatan2WithCheck(IkReal((((py*x403))+(((-1.0)*x401*(py*py)))+(((-1.0)*x400*x401))+(((-1.0)*x398*x401))+(((9008201793.0)*px))+(((-34393449208997.4)*py)))),IkReal(((((-1.0)*x402*(px*px)))+((px*x403))+(((-9008201793.0)*py))+(((-1.0)*x400*x402))+(((-1.0)*x399*x402))+(((-34393449208997.4)*px)))),IKFAST_ATAN2_MAGTHRESH);
if(!x404.valid){
continue;
}
CheckValue<IkReal> x405=IKPowWithIntegerCheck(IKsign(((((39473300000000.0)*x399))+(((39473300000000.0)*x398)))),-1);
if(!x405.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x404.value)+(((1.5707963267949)*(x405.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x406=IKcos(j0);
IkReal x407=IKsin(j0);
IkReal x408=((1.0)*x406);
IkReal x409=(py*x407);
evalcond[0]=((-0.00022821)+((px*x407))+(((-1.0)*py*x408)));
evalcond[1]=((124137.713628946)+(((-1.0)*px*x408))+(((-271517.24137931)*pz))+(((-106896.337932484)*sj2))+(((-1.0)*x409)));
evalcond[2]=((-0.0550295187343959)+(((-1.0)*(px*px)))+(((-0.06315728)*x409))+(((-1.0)*(pz*pz)))+(((0.91440046)*pz))+(((-1.0)*(py*py)))+(((-0.06315728)*px*x406)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x410=((27151724137931.0)*pz);
IkReal x411=((10689633793248.4)*sj2);
CheckValue<IkReal> x412=IKPowWithIntegerCheck(IKsign(((((100000000.0)*(px*px)))+(((100000000.0)*(py*py))))),-1);
if(!x412.valid){
continue;
}
CheckValue<IkReal> x413 = IKatan2WithCheck(IkReal(((((22821.0)*px))+(((-1.0)*py*x411))+(((-1.0)*py*x410))+(((12413771362894.6)*py)))),IkReal(((((-1.0)*px*x410))+(((-1.0)*px*x411))+(((12413771362894.6)*px))+(((-22821.0)*py)))),IKFAST_ATAN2_MAGTHRESH);
if(!x413.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x412.value)))+(x413.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x414=IKcos(j0);
IkReal x415=IKsin(j0);
IkReal x416=((1.0)*x414);
IkReal x417=(py*x415);
evalcond[0]=((-0.00022821)+((px*x415))+(((-1.0)*py*x416)));
evalcond[1]=((124137.713628946)+(((-1.0)*px*x416))+(((-271517.24137931)*pz))+(((-106896.337932484)*sj2))+(((-1.0)*x417)));
evalcond[2]=((-0.0550295187343959)+(((-1.0)*(px*px)))+(((-0.06315728)*x417))+(((-1.0)*(pz*pz)))+(((0.91440046)*pz))+(((-1.0)*(py*py)))+(((-0.06315728)*px*x414)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x418=(px*sj1);
IkReal x419=((39370000.0)*sj2);
IkReal x420=(py*sj1);
IkReal x421=((3157864.0)*cj1);
IkReal x422=(cj1*px);
IkReal x423=((39370000.0)*cj2);
IkReal x424=((145.0)*cj2);
IkReal x425=((145.0)*sj2);
IkReal x426=(cj1*py);
CheckValue<IkReal> x427=IKPowWithIntegerCheck(IKsign(((((100000000.0)*(px*px)))+(((100000000.0)*(py*py))))),-1);
if(!x427.valid){
continue;
}
CheckValue<IkReal> x428 = IKatan2WithCheck(IkReal((((x420*x424))+((x425*x426))+(((-45720023.0)*x420))+((x419*x420))+((py*x421))+(((22821.0)*px))+(((-1.0)*x423*x426)))),IkReal(((((-1.0)*x422*x423))+(((-45720023.0)*x418))+((x418*x424))+((x418*x419))+((x422*x425))+((px*x421))+(((-22821.0)*py)))),IKFAST_ATAN2_MAGTHRESH);
if(!x428.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x427.value)))+(x428.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x429=IKcos(j0);
IkReal x430=IKsin(j0);
IkReal x431=((1.45e-6)*sj2);
IkReal x432=((0.91440046)*sj1);
IkReal x433=((0.06315728)*cj1);
IkReal x434=((0.3937)*cj2);
IkReal x435=((0.3937)*sj2);
IkReal x436=(pz*sj1);
IkReal x437=((1.45e-6)*cj2);
IkReal x438=(cj1*pz);
IkReal x439=(px*x429);
IkReal x440=(py*x430);
evalcond[0]=((-0.00022821)+((px*x430))+(((-1.0)*py*x429)));
evalcond[1]=((0.45720023)+(((-1.0)*x437))+(((-1.0)*x435))+((sj1*x440))+x438+((sj1*x439)));
evalcond[2]=((-0.03157864)+(((-1.0)*x431))+(((-1.0)*x436))+((cj1*x439))+((cj1*x440))+x434);
evalcond[3]=((((-1.0)*x439))+((cj1*x431))+(((-1.0)*x440))+(((-1.0)*cj1*x434))+(((-0.45720023)*sj1))+(((0.03157864)*cj1))+((sj1*x437))+((sj1*x435)));
evalcond[4]=((-0.0550295187343959)+(((-1.0)*(px*px)))+(((-1.0)*x432*x440))+(((-1.0)*x432*x439))+(((-0.06315728)*x436))+(((-1.0)*(pz*pz)))+((x433*x439))+(((-1.0)*(py*py)))+(((-0.91440046)*x438))+((x433*x440)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x441=((39370000.0)*cj2);
IkReal x442=((145.0)*sj2);
IkReal x443=((100000000.0)*cj1);
IkReal x444=((22821.0)*cj1);
IkReal x445=((100000000.0)*pz*sj1);
CheckValue<IkReal> x446 = IKatan2WithCheck(IkReal(((((3157864.0)*py))+((px*x444))+((py*x445))+((py*x442))+(((-1.0)*py*x441)))),IkReal(((((3157864.0)*px))+((px*x445))+((px*x442))+(((-1.0)*py*x444))+(((-1.0)*px*x441)))),IKFAST_ATAN2_MAGTHRESH);
if(!x446.valid){
continue;
}
CheckValue<IkReal> x447=IKPowWithIntegerCheck(IKsign((((x443*(py*py)))+((x443*(px*px))))),-1);
if(!x447.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x446.value)+(((1.5707963267949)*(x447.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x448=IKcos(j0);
IkReal x449=IKsin(j0);
IkReal x450=((1.45e-6)*sj2);
IkReal x451=((0.91440046)*sj1);
IkReal x452=((0.06315728)*cj1);
IkReal x453=((0.3937)*cj2);
IkReal x454=((0.3937)*sj2);
IkReal x455=(pz*sj1);
IkReal x456=((1.45e-6)*cj2);
IkReal x457=(cj1*pz);
IkReal x458=(px*x448);
IkReal x459=(py*x449);
evalcond[0]=((-0.00022821)+((px*x449))+(((-1.0)*py*x448)));
evalcond[1]=((0.45720023)+(((-1.0)*x454))+(((-1.0)*x456))+x457+((sj1*x459))+((sj1*x458)));
evalcond[2]=((-0.03157864)+(((-1.0)*x455))+((cj1*x458))+((cj1*x459))+(((-1.0)*x450))+x453);
evalcond[3]=((((-1.0)*x459))+(((-1.0)*x458))+((cj1*x450))+(((-0.45720023)*sj1))+(((-1.0)*cj1*x453))+((sj1*x454))+((sj1*x456))+(((0.03157864)*cj1)));
evalcond[4]=((-0.0550295187343959)+(((-1.0)*(px*px)))+((x452*x458))+((x452*x459))+(((-0.91440046)*x457))+(((-1.0)*(pz*pz)))+(((-1.0)*x451*x459))+(((-1.0)*x451*x458))+(((-0.06315728)*x455))+(((-1.0)*(py*py))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x460=((39370000.0)*sj2);
IkReal x461=((22821.0)*sj1);
IkReal x462=((100000000.0)*sj1);
IkReal x463=((145.0)*cj2);
IkReal x464=((100000000.0)*cj1*pz);
CheckValue<IkReal> x465=IKPowWithIntegerCheck(IKsign((((x462*(py*py)))+((x462*(px*px))))),-1);
if(!x465.valid){
continue;
}
CheckValue<IkReal> x466 = IKatan2WithCheck(IkReal(((((-1.0)*py*x464))+((px*x461))+((py*x460))+((py*x463))+(((-45720023.0)*py)))),IkReal(((((-1.0)*py*x461))+((px*x463))+((px*x460))+(((-1.0)*px*x464))+(((-45720023.0)*px)))),IKFAST_ATAN2_MAGTHRESH);
if(!x466.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x465.value)))+(x466.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x467=IKcos(j0);
IkReal x468=IKsin(j0);
IkReal x469=((1.45e-6)*sj2);
IkReal x470=((0.91440046)*sj1);
IkReal x471=((0.06315728)*cj1);
IkReal x472=((0.3937)*cj2);
IkReal x473=((0.3937)*sj2);
IkReal x474=(pz*sj1);
IkReal x475=((1.45e-6)*cj2);
IkReal x476=(cj1*pz);
IkReal x477=(px*x467);
IkReal x478=(py*x468);
evalcond[0]=((-0.00022821)+(((-1.0)*py*x467))+((px*x468)));
evalcond[1]=((0.45720023)+(((-1.0)*x475))+(((-1.0)*x473))+x476+((sj1*x477))+((sj1*x478)));
evalcond[2]=((-0.03157864)+((cj1*x478))+((cj1*x477))+(((-1.0)*x469))+(((-1.0)*x474))+x472);
evalcond[3]=(((cj1*x469))+(((-0.45720023)*sj1))+(((-1.0)*x477))+(((-1.0)*x478))+(((-1.0)*cj1*x472))+((sj1*x473))+((sj1*x475))+(((0.03157864)*cj1)));
evalcond[4]=((-0.0550295187343959)+((x471*x478))+((x471*x477))+(((-1.0)*(px*px)))+(((-0.91440046)*x476))+(((-0.06315728)*x474))+(((-1.0)*(pz*pz)))+(((-1.0)*x470*x478))+(((-1.0)*x470*x477))+(((-1.0)*(py*py))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x481 = IKatan2WithCheck(IkReal(((-1.0)*py)),IkReal(px),IKFAST_ATAN2_MAGTHRESH);
if(!x481.valid){
continue;
}
IkReal x479=((1.0)*(x481.value));
if((((px*px)+(py*py))) < -0.00001)
continue;
CheckValue<IkReal> x482=IKPowWithIntegerCheck(IKabs(IKsqrt(((px*px)+(py*py)))),-1);
if(!x482.valid){
continue;
}
if( (((0.00022821)*(x482.value))) < -1-IKFAST_SINCOS_THRESH || (((0.00022821)*(x482.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x480=IKasin(((0.00022821)*(x482.value)));
j0array[0]=((((-1.0)*x479))+x480);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x479))+(((-1.0)*x480)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
IkReal j1eval[3];
IkReal x483=cj2*cj2;
IkReal x484=((1.45e-6)*cj2);
IkReal x485=(py*sj0);
IkReal x486=(cj0*px);
IkReal x487=(pz*sj2);
IkReal x488=((1.0)*cj2);
IkReal x489=((271517.24137931)*sj2);
IkReal x490=((0.3937)*sj2);
IkReal x491=(cj2*sj2);
IkReal x492=(cj2*pz);
IkReal x493=((1.0)*pz);
j1eval[0]=((((-1.0)*x486*x489))+(((-1.0)*x486*x488))+(((-21778.3724137931)*pz))+(((-1.0)*x487))+(((315310.503448276)*x485))+(((315310.503448276)*x486))+(((271517.24137931)*x492))+(((-1.0)*x485*x488))+(((-1.0)*x485*x489)));
j1eval[1]=IKsign(((((-1.0)*x484*x485))+(((-1.0)*x484*x486))+(((-1.45e-6)*x487))+(((-1.0)*x486*x490))+(((0.45720023)*x486))+(((0.45720023)*x485))+(((0.3937)*x492))+(((-1.0)*x485*x490))+(((-0.03157864)*pz))));
j1eval[2]=((IKabs(((0.0144371906060872)+(((-1.0)*x486*x493))+(((-0.0124318476276665)*sj2))+(((-1.0)*x485*x493))+(((-0.179999776340028)*cj2))+(((0.154999689997898)*x491))+(((1.14173e-6)*x483)))))+(IKabs(((-0.364031740312053)+(((0.359999461102)*sj2))+(((1.325880667e-6)*cj2))+(pz*pz)+(((-1.14173e-6)*x491))+(((0.154999689997898)*x483))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[3];
IkReal x494=cj2*cj2;
IkReal x495=(py*sj0);
IkReal x496=((1.45e-6)*sj2);
IkReal x497=(cj0*px);
IkReal x498=((1.0)*pz);
IkReal x499=(cj2*sj2);
IkReal x500=((271517.24137931)*cj2);
IkReal x501=(pz*sj2);
IkReal x502=((0.3937)*cj2);
j1eval[0]=((((-1.0)*x497*x500))+(((-1.0)*cj2*x498))+(((-1.0)*x495*x500))+(((21778.3724137931)*x495))+(((21778.3724137931)*x497))+((sj2*x497))+((sj2*x495))+(((-271517.24137931)*x501))+(((315310.503448276)*pz)));
j1eval[1]=IKsign((((x495*x496))+(((0.45720023)*pz))+(((-1.0)*x497*x502))+((x496*x497))+(((-1.0)*x495*x502))+(((-0.3937)*x501))+(((0.03157864)*x495))+(((0.03157864)*x497))+(((-1.45e-6)*cj2*pz))));
j1eval[2]=((IKabs(((-0.0144371906060872)+(((-1.0)*x495*x498))+(((-1.0)*x497*x498))+(((0.0124318476276665)*sj2))+(((-1.14173e-6)*x494))+(((-0.154999689997898)*x499))+(((0.179999776340028)*cj2)))))+(IKabs(((0.0009972105063521)+(((-0.024865021136)*cj2))+(((9.1578056e-8)*sj2))+(((-1.14173e-6)*x499))+(((-1.0)*pz*x498))+(((0.154999689997898)*x494))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x503=cj0*cj0;
IkReal x504=py*py;
IkReal x505=((pz*pz)+x504+((x503*(px*px)))+(((2.0)*cj0*px*py*sj0))+(((-1.0)*x503*x504)));
j1eval[0]=x505;
j1eval[1]=IKsign(x505);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j1]

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x506=cj0*cj0;
IkReal x507=py*py;
IkReal x508=((1.45e-6)*cj2);
IkReal x509=(py*sj0);
IkReal x510=(cj0*px);
IkReal x511=(pz*sj2);
IkReal x512=((1.45e-6)*sj2);
IkReal x513=((0.3937)*sj2);
IkReal x514=((0.3937)*cj2);
CheckValue<IkReal> x515 = IKatan2WithCheck(IkReal((((x510*x513))+(((-0.45720023)*x509))+((x508*x509))+((pz*x514))+(((-1.45e-6)*x511))+((x508*x510))+(((-0.45720023)*x510))+(((-0.03157864)*pz))+((x509*x513)))),IkReal((((x510*x512))+(((0.03157864)*x509))+(((0.3937)*x511))+(((-0.45720023)*pz))+(((0.03157864)*x510))+((pz*x508))+(((-1.0)*x509*x514))+(((-1.0)*x510*x514))+((x509*x512)))),IKFAST_ATAN2_MAGTHRESH);
if(!x515.valid){
continue;
}
CheckValue<IkReal> x516=IKPowWithIntegerCheck(IKsign(((((-1.0)*x506*x507))+(((2.0)*x509*x510))+(pz*pz)+x507+((x506*(px*px))))),-1);
if(!x516.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x515.value)+(((1.5707963267949)*(x516.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x517=IKsin(j1);
IkReal x518=IKcos(j1);
IkReal x519=((1.45e-6)*sj2);
IkReal x520=(cj0*px);
IkReal x521=(py*sj0);
IkReal x522=((0.3937)*cj2);
IkReal x523=((0.3937)*sj2);
IkReal x524=((1.45e-6)*cj2);
IkReal x525=((0.3937)*x517);
IkReal x526=(pz*x517);
IkReal x527=((0.06315728)*x518);
IkReal x528=((0.91440046)*x517);
IkReal x529=(pz*x518);
evalcond[0]=((0.45720023)+(((-1.0)*x523))+(((-1.0)*x524))+((x517*x521))+((x517*x520))+x529);
evalcond[1]=((-0.03157864)+(((-1.0)*x526))+((x518*x520))+((x518*x521))+x522+(((-1.0)*x519)));
evalcond[2]=(((x517*x519))+(((-1.0)*x518*x523))+(((-1.0)*x518*x524))+(((-1.0)*x517*x522))+(((0.03157864)*x517))+pz+(((0.45720023)*x518)));
evalcond[3]=((((-1.0)*x520))+(((-1.0)*x521))+((x517*x524))+((x517*x523))+(((-1.0)*x518*x522))+(((0.03157864)*x518))+((x518*x519))+(((-0.45720023)*x517)));
evalcond[4]=((-0.0550295187343959)+(((-1.0)*(px*px)))+(((-1.0)*x520*x528))+(((-1.0)*x521*x528))+(((-0.91440046)*x529))+((x521*x527))+((x520*x527))+(((-1.0)*(pz*pz)))+(((-1.0)*(py*py)))+(((-0.06315728)*x526)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x530=cj2*cj2;
IkReal x531=(cj2*sj2);
IkReal x532=(py*sj0);
IkReal x533=((1.45e-6)*sj2);
IkReal x534=((0.3937)*cj2);
IkReal x535=(cj0*px);
IkReal x536=((1.0)*pz);
CheckValue<IkReal> x537 = IKatan2WithCheck(IkReal(((-0.0144371906060872)+(((-1.0)*x532*x536))+(((-0.154999689997898)*x531))+(((0.0124318476276665)*sj2))+(((-1.0)*x535*x536))+(((0.179999776340028)*cj2))+(((-1.14173e-6)*x530)))),IkReal(((0.0009972105063521)+(((-0.024865021136)*cj2))+(((9.1578056e-8)*sj2))+(((-1.0)*pz*x536))+(((0.154999689997898)*x530))+(((-1.14173e-6)*x531)))),IKFAST_ATAN2_MAGTHRESH);
if(!x537.valid){
continue;
}
CheckValue<IkReal> x538=IKPowWithIntegerCheck(IKsign(((((-1.0)*x532*x534))+(((-1.0)*x534*x535))+(((0.45720023)*pz))+(((-0.3937)*pz*sj2))+(((0.03157864)*x532))+(((0.03157864)*x535))+((x532*x533))+((x533*x535))+(((-1.45e-6)*cj2*pz)))),-1);
if(!x538.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x537.value)+(((1.5707963267949)*(x538.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x539=IKsin(j1);
IkReal x540=IKcos(j1);
IkReal x541=((1.45e-6)*sj2);
IkReal x542=(cj0*px);
IkReal x543=(py*sj0);
IkReal x544=((0.3937)*cj2);
IkReal x545=((0.3937)*sj2);
IkReal x546=((1.45e-6)*cj2);
IkReal x547=((0.3937)*x539);
IkReal x548=(pz*x539);
IkReal x549=((0.06315728)*x540);
IkReal x550=((0.91440046)*x539);
IkReal x551=(pz*x540);
evalcond[0]=((0.45720023)+((x539*x542))+((x539*x543))+(((-1.0)*x546))+(((-1.0)*x545))+x551);
evalcond[1]=((-0.03157864)+(((-1.0)*x548))+((x540*x543))+((x540*x542))+(((-1.0)*x541))+x544);
evalcond[2]=(((x539*x541))+(((-1.0)*x539*x544))+(((-1.0)*x540*x546))+(((-1.0)*x540*x545))+pz+(((0.03157864)*x539))+(((0.45720023)*x540)));
evalcond[3]=(((x539*x546))+((x539*x545))+(((-1.0)*x543))+(((-1.0)*x542))+((x540*x541))+(((-1.0)*x540*x544))+(((0.03157864)*x540))+(((-0.45720023)*x539)));
evalcond[4]=((-0.0550295187343959)+(((-1.0)*(px*px)))+(((-0.91440046)*x551))+((x542*x549))+((x543*x549))+(((-1.0)*(pz*pz)))+(((-1.0)*x543*x550))+(((-1.0)*(py*py)))+(((-1.0)*x542*x550))+(((-0.06315728)*x548)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x552=cj2*cj2;
IkReal x553=((1.45e-6)*cj2);
IkReal x554=(py*sj0);
IkReal x555=(cj0*px);
IkReal x556=(cj2*sj2);
IkReal x557=((0.3937)*sj2);
IkReal x558=((1.0)*pz);
CheckValue<IkReal> x559 = IKatan2WithCheck(IkReal(((-0.364031740312053)+(((0.359999461102)*sj2))+(((1.325880667e-6)*cj2))+(pz*pz)+(((0.154999689997898)*x552))+(((-1.14173e-6)*x556)))),IkReal(((0.0144371906060872)+(((-1.0)*x555*x558))+(((-1.0)*x554*x558))+(((-0.0124318476276665)*sj2))+(((0.154999689997898)*x556))+(((-0.179999776340028)*cj2))+(((1.14173e-6)*x552)))),IKFAST_ATAN2_MAGTHRESH);
if(!x559.valid){
continue;
}
CheckValue<IkReal> x560=IKPowWithIntegerCheck(IKsign(((((-1.0)*x555*x557))+(((-1.0)*x554*x557))+(((0.3937)*cj2*pz))+(((-1.0)*x553*x554))+(((-1.0)*x553*x555))+(((-1.45e-6)*pz*sj2))+(((0.45720023)*x554))+(((0.45720023)*x555))+(((-0.03157864)*pz)))),-1);
if(!x560.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x559.value)+(((1.5707963267949)*(x560.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x561=IKsin(j1);
IkReal x562=IKcos(j1);
IkReal x563=((1.45e-6)*sj2);
IkReal x564=(cj0*px);
IkReal x565=(py*sj0);
IkReal x566=((0.3937)*cj2);
IkReal x567=((0.3937)*sj2);
IkReal x568=((1.45e-6)*cj2);
IkReal x569=((0.3937)*x561);
IkReal x570=(pz*x561);
IkReal x571=((0.06315728)*x562);
IkReal x572=((0.91440046)*x561);
IkReal x573=(pz*x562);
evalcond[0]=((0.45720023)+((x561*x565))+((x561*x564))+x573+(((-1.0)*x567))+(((-1.0)*x568)));
evalcond[1]=((-0.03157864)+((x562*x565))+((x562*x564))+(((-1.0)*x570))+x566+(((-1.0)*x563)));
evalcond[2]=((((0.45720023)*x562))+((x561*x563))+(((-1.0)*x562*x568))+(((-1.0)*x562*x567))+pz+(((-1.0)*x561*x566))+(((0.03157864)*x561)));
evalcond[3]=((((-0.45720023)*x561))+((x562*x563))+((x561*x567))+((x561*x568))+(((-1.0)*x562*x566))+(((-1.0)*x564))+(((-1.0)*x565))+(((0.03157864)*x562)));
evalcond[4]=((-0.0550295187343959)+(((-1.0)*(px*px)))+(((-0.06315728)*x570))+(((-0.91440046)*x573))+(((-1.0)*x565*x572))+((x565*x571))+(((-1.0)*x564*x572))+((x564*x571))+(((-1.0)*(pz*pz)))+(((-1.0)*(py*py))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
return solutions.GetNumSolutions()>0;
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "f658d0dba80033cffcfe80a45e0617a8"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
